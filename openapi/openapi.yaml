openapi: 3.0.2
info:
  title: Northbound REST API DNOR
  description: |-
    API definitions for programmatic access to DriveNets Network Orchestrator (DNOR). The API calls are modelled after, and reflected in the DNOR User Interface.

    When you first sign up with the SSP, a POST API request (/auth/login) is sent with the following payload:

      *{"username":"user@company.com"*,*"password":"mypass"*}, **where** *“user@company.com”* and *“mypass”* are the email address and password you provided during sign up.

      The API call returns a token value. This is the authorization token for your account. This token is sent in the header of all API requests, as follows:
      1. Authorization: Bearer <token-value>
      The REST API enables you to interact with the SP systems to provision services for your organization from your server-side applications.
      2. Some other text

      ## H2 Heading

      This is also an example of an unordered list:
      - Some item
      - Another item

      ### H3 Heading

      #### H4 Heading

      Here is a link: (I copied)

        [Dinosuars](https://en.wikipedia.org/wiki/Dinosaurs)

      The [New Horizons](http://pluto.jhuapl.edu/) space probe took photos of Pluto.

    Now for my next trick, I will add an image :)

    This image is form a site called Lorem Picsum....

    ![True colour image](https://picsum.photos/200/300)

  version: v7.0.6
servers:
  - url: http://localhost
tags:
  - name: Northbound REST API
paths:
  /api/login:
    post:
      summary: User login
      tags:
        - Authentication
      description: Use DNOR credentials to log into DNOR. If you dont have credentials contacted your system administrator.
      requestBody:
        description: Login credentials<br/>
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                  example: superadmin
                password:
                  type: string
                  example: superadmin
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: New token created!
                  token:
                    type: string
                    example: eyJhbGciOiJIUz...
        "403":
          description: Incorrect username / password
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Incorrect credentials
  /api/logout:
    post:
      security:
        - Authentication: []
      summary: User logout
      tags:
        - Authentication
      description: Use DNOR credentials to log out of DNOR.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User session logout succeeded
        "403":
          description: Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error!
  /api/nce-management/deploy:
    post:
      security:
        - Authentication: []
      summary: Create NCE
      tags:
        - NCE Management
      description: Deploy DNOS to create an NCE.
      requestBody:
        description: NCE Configuration. (Click Schema to display the element descriptions)
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - oobIpv4Address
                - oobIpv4Subnet
                - candidateDNOSYaml
                - inBandIpv4Address
                - inBandIpv4Subnet
                - formation
                - nccs
              properties:
                name:
                  allOf:
                    - $ref: "#/components/schemas/nameType"
                    - description: >-
                        NCE name. Use numbers and / or letters. The name must be
                        at least four characters in length. No special
                        characters such as !@#$ can be used
                candidateDNOSYaml:
                  type: string
                  example: v13.0
                  description: DNOS version, for example 11.1
                oobIpv4Address:
                  oneOf:
                    - $ref: "#/components/schemas/ipv4"
                    - $ref: "#/components/schemas/dhcp"
                  example: Acquired
                  description: "mgmt0 IPv4 address: (X.X.X.X/Acquired) Acquired - DHCP mode."
                oobIpv4Subnet:
                  allOf:
                    - $ref: "#/components/schemas/ipv4PrefixLength"
                    - description: >-
                        mgmt0 IPv4 prefix length. System ignores oobIpv4Subnet
                        in DHCP mode.
                oobIpv6Address:
                  oneOf:
                    - $ref: "#/components/schemas/ipv6"
                    - $ref: "#/components/schemas/dhcp"
                  example: Acquired
                  description: >-
                    mgmt0 IPv6 address: (CAFE::1/Acquired). Acquired - DHCP
                    mode. If oobIpv6Address is not specified mgmt0 IPv6 address
                    will not be set.
                oobIpv6Subnet:
                  allOf:
                    - $ref: "#/components/schemas/ipv6PrefixLength"
                    - description: >-
                        mgmt0 IPv6 subnet mask. System ignores oobIpv6Subnet
                        incase DHCP mode or oobIpv6Address is not specified
                oobIpv4DefaultGateway:
                  allOf:
                    - $ref: "#/components/schemas/ipv4"
                    - description: Default gateway IPv4 address for the OOB mgmt inteface
                oobIpv6DefaultGateway:
                  allOf:
                    - $ref: "#/components/schemas/ipv6"
                    - description: Default gateway IPv6 address for the OOB mgmt inteface
                inBandIpv4Address:
                  allOf:
                    - description: >-
                        Monitoring channel - Lo-0 IPv4 address (X.X.X.X). There
                        must be at least one IPv4 or IPv6 VIP Out of Band
                        address
                    - $ref: "#/components/schemas/ipv4"
                inBandIpv4Subnet:
                  allOf:
                    - $ref: "#/components/schemas/ipv4PrefixLength"
                    - description: Monitoring channel - Lo-0 IPv4 subnet mask
                inBandIpv6Address:
                  allOf:
                    - $ref: "#/components/schemas/ipv6"
                    - description: >-
                        Monitoring channel - Lo-0 IPv6 address (CAFE::1). There
                        must be at least one IPv4 or IPv6 VIP Out of Band
                        address
                inBandIpv6Subnet:
                  allOf:
                    - $ref: "#/components/schemas/ipv6PrefixLength"
                    - description: Monitoring channel - Lo-0 IPv6 subnet mask
                minimumNccs:
                  allOf:
                    - $ref: "#/components/schemas/minimumNccType"
                    - description: >-
                        [1-2], Minimum number of registred NCCs to start the
                        deployment
                siteId:
                  allOf:
                    - $ref: "#/components/schemas/uuid"
                    - description: NCE site
                configurationData:
                  type: object
                  properties:
                    filename:
                      type: string
                      description: configuration file name
                      example: baseConfig.xml
                    username:
                      type: string
                      example: dnroot
                      description: user name of for configuration commit
                    configurationId:
                      allOf:
                        - $ref: "#/components/schemas/uuid"
                        - description: configuration transaction id
                formation:
                  type: object
                  properties:
                    type:
                      allOf:
                        - $ref: "#/components/schemas/formationType"
                        - description: "NCE formation: Single or Cluster"
                    specific:
                      allOf:
                        - $ref: "#/components/schemas/specificType"
                        - description: >-
                            NCE type:
                            SA-40C/SA-10CD/SA-32CD/SA-36CD/SA-64XXV8C/SA-64X12C-S/CL-16/CL-96/CL-32/CL-48/CL-64/CL-76/CL-192
                nccs:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required:
                      - serialNumber
                      - nccId
                    properties:
                      serialNumber:
                        type: string
                        description: >-
                          NCC serial number <br /><B> Note: </B> To add an
                          addiitonal NCC, duplicate this array and add the new
                          NCC serial number and the NCC-ID
                      nccId:
                        type: number
                        minimum: 0
                        maximum: 1
                        description: >-
                          NCC-ID: [0-1]. If the NCE type is not a Standalone
                          formation, you can add upto 2 NCCs. One with an ID of
                          0, and the other with an ID of 1
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Starting deployment
                  processId:
                    $ref: "#/components/schemas/uuid"
                  clusterId:
                    $ref: "#/components/schemas/uuid"
          description: Starting deployment
        "403":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Deployment failed
          description: Deployment failed
  /api/nce-management/{cluster-id}:
    put:
      security:
        - Authentication: []
      summary: Edit NCE
      tags:
        - NCE Management
      description: >-
        Edit an existing NCE. If NCE is in 'Waiting for equipment' status all
        required body fields should be provided as in Create NCE
      parameters:
        - name: cluster-id
          in: path
          required: true
          description: NCE System-ID of the NCE.
          schema:
            $ref: "#/components/schemas/uuid"
      requestBody:
        description: NCE Configuration. (Click Schema to display the element descriptions)
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - inBandIpv4Address
                - inBandIpv4Subnet
                - nccs
              properties:
                name:
                  allOf:
                    - $ref: "#/components/schemas/nameType"
                    - description: >-
                        NCE name. Use numbers and / or letters. The name must be
                        at least four characters in length. No special
                        characters such as !@#$ can be used
                inBandIpv4Address:
                  allOf:
                    - description: >-
                        Monitoring channel - Lo-0 IPv4 address (X.X.X.X). There
                        must be at least one IPv4 or IPv6 VIP Out of Band
                        address
                    - $ref: "#/components/schemas/ipv4"
                inBandIpv4Subnet:
                  allOf:
                    - $ref: "#/components/schemas/ipv4PrefixLength"
                    - description: Monitoring channel - Lo-0 IPv4 subnet mask
                inBandIpv6Address:
                  allOf:
                    - $ref: "#/components/schemas/ipv6"
                    - description: >-
                        Monitoring channel - Lo-0 IPv6 address (CAFE::1). There
                        must be at least one IPv4 or IPv6 VIP Out of Band
                        address
                inBandIpv6Subnet:
                  allOf:
                    - $ref: "#/components/schemas/ipv6PrefixLength"
                    - description: Monitoring channel - Lo-0 IPv6 subnet mask
                oobIpv4DefaultGateway:
                  allOf:
                    - $ref: "#/components/schemas/ipv4"
                    - description: Default gateway IPv4 address for the OOB mgmt inteface
                oobIpv6DefaultGateway:
                  allOf:
                    - $ref: "#/components/schemas/ipv6"
                    - description: Default gateway IPv6 address for the OOB mgmt inteface
                siteId:
                  allOf:
                    - $ref: "#/components/schemas/uuid"
                    - description: NCE site
                formation:
                  type: object
                  properties:
                    type:
                      allOf:
                        - $ref: "#/components/schemas/formationType"
                        - description: "NCE formation: Single or Cluster"
                    specific:
                      allOf:
                        - $ref: "#/components/schemas/specificType"
                        - description: >-
                            NCE type:
                            SA-40C/SA-10CD/SA-32CD/SA-36CD/SA-64XXV8C/SA-64X12C-S/CL-16/CL-96/CL-32/CL-48/CL-64/CL-76/CL-192
                targetGroupId:
                  allOf:
                    - $ref: "#/components/schemas/uuid"
                    - description: Required group ID
                nccs:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required:
                      - serialNumber
                      - nccId
                    properties:
                      serialNumber:
                        type: string
                        description: >-
                          NCC serial number <br /><B> Note: </B> To add an
                          addiitonal NCC, duplicate this array and add the new
                          NCC serial number and the NCC-ID
                      nccId:
                        type: number
                        minimum: 0
                        maximum: 1
                        description: >-
                          NCC-ID: [0-1]. If the NCE type is not a Standalone
                          formation, you can add upto 2 NCCs. One with an ID of
                          0, and the other with an ID of 1
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Starting edit
                  processId:
                    $ref: "#/components/schemas/uuid"
          description: Starting edit
        "403":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Edit failed
          description: Edit failed
    delete:
      security:
        - Authentication: []
      summary: Delete NCE
      tags:
        - NCE Management
      description: >-
        Remove an NCE from DNOR and delete the DNOS installation on the NCE
        nodes.
      parameters:
        - name: cluster-id
          in: path
          required: true
          description: NCE System-ID of the NCE.
          schema:
            $ref: "#/components/schemas/uuid"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Starting delete
                  processId:
                    allOf:
                      - $ref: "#/components/schemas/uuid"
                      - example: b01a0d88-49a3-45a6-9811-fb98b10c74e9
          description: Starting delete
        "403":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Delete failed
          description: Delete failed
  /api/nce-management/download/{cluster-id}:
    post:
      security:
        - Authentication: []
      summary: Download DNOS version
      tags:
        - NCE Management
      description: Download a newer version of DNOS to the NCE (prior to upgrade).
      parameters:
        - name: cluster-id
          in: path
          required: true
          description: System-ID of the NCE to download.
          schema:
            $ref: "#/components/schemas/uuid"
      requestBody:
        description: Download values. (Click Schema to display the element descriptions)
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - version
              properties:
                version:
                  type: string
                  description: DNOS version to download
                inBand:
                  type: boolean
                  default: "false"
                  description: >-
                    True: Download the DNOS version to the NCC via the in-band
                    channel. False: Download the DNOS version to the NCC via the
                    out-of-band channel
      responses:
        "200":
          content:
            application/json: {}
          description: Starting download
        "403":
          description: >-
            Download has failed because either the cluster-id is incorrect or
            the DNOS version was not found
  /api/nce-management/upgrade/{cluster-id}:
    post:
      security:
        - Authentication: []
      summary: Upgrade NCE
      tags:
        - NCE Management
      description: >-
        Upgrade the version of DNOS running on an NCE. Before calling this API,
        call /api/nce-management/precheck and retrieve precheck result from the
        cluster activity log to verify that the upgrade can run.
      parameters:
        - name: cluster-id
          in: path
          required: true
          description: System-ID of the NCE to upgrade.
          schema:
            $ref: "#/components/schemas/uuid"
      requestBody:
        description: Upgrade detail
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          content:
            application/json: {}
          description: Starting replace/upgrade process
        "404":
          description: NCE system-ID doesn\'t exist
  /api/nce-management/cancel/{cluster-id}:
    post:
      security:
        - Authentication: []
      summary: Cancel current process on NCE
      tags:
        - NCE Management
      description: >-
        Cancel the current process running on an NCE, such as upgrade or NCE
        deployment.
      parameters:
        - in: path
          name: cluster-id
          required: true
          description: System-ID of the NCE to cancel
          schema:
            $ref: "#/components/schemas/uuid"
      responses:
        "200":
          content:
            application/json: {}
          description: Successful
        "403":
          content:
            application/json: {}
          description: Cannot cancel the process at the current stage
        "404":
          content:
            application/json: {}
          description: Cannot cancel the process - process not found
        "500":
          content:
            application/json: {}
          description: Cannot cancel the process - unknown error
  /api/nce-management/precheck/{cluster-id}:
    post:
      security:
        - Authentication: []
      summary: Preupgrade validation
      tags:
        - NCE Management
      description: >-
        Validate that DNOR has the running NCE images in the image repository,
        (if a revert is required), that the new DNOS version was downloaded to
        the NCE nodes, and that there is out-of-band connectivity to at least
        one NCC or NCP if the NCE is a standalone formation.
      parameters:
        - in: path
          name: cluster-id
          required: true
          description: >-
            System-ID of the NCE to perform a Preupgrade check. The system-ID
            can be displayed using the CLI command, show system version
          schema:
            $ref: "#/components/schemas/uuid"
      responses:
        "200":
          content:
            application/json: {}
          description: Starting upgrade precheck
        "403":
          content:
            application/json: {}
          description: Precheck failed
  /api/redundancy/disable:
    put:
      security:
        - Authentication: []
      summary: Disable DNOR Node
      tags:
        - Redundancy
      description: Disable all DNOR services on node
      requestBody:
        description: >-
          Disable DNOR node values. (Click Schema to display the element
          descriptions)
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - dnorRole
                - addr
              properties:
                dnorRole:
                  allOf:
                    - $ref: "#/components/schemas/DnorRole"
                    - description: The role of the target DNOR node
                addr:
                  allOf:
                    - $ref: "#/components/schemas/ipv4"
                    - description: IP address of the target DNOR node
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: "#/components/schemas/RedundancyDisableSuccessMsg"
                  code:
                    $ref: "#/components/schemas/uuid"
          description: Disable DNOR node, starting
        "403":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: "#/components/schemas/RedundancyDisableFailMsg"
          description: Disable DNOR node failed
  /api/redundancy/enable:
    put:
      security:
        - Authentication: []
      summary: Enable DNOR node
      tags:
        - Redundancy
      description: Enable all DNOR services on node
      requestBody:
        description: >-
          Enable DNOR node values. (Click Schema to display the element
          descriptions)
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - dnorRole
                - addr
              properties:
                dnorRole:
                  allOf:
                    - $ref: "#/components/schemas/DnorRole"
                    - description: The role of target DNOR node
                addr:
                  allOf:
                    - $ref: "#/components/schemas/ipv4"
                    - description: IP address of target DNOR node
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: "#/components/schemas/RedundancyEnableSuccessMsg"
                  code:
                    $ref: "#/components/schemas/uuid"
          description: Enable DNOR node, starting
        "403":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: "#/components/schemas/RedundancyEnableFailMsg"
          description: Enable DNOR node failed
  /api/redundancy:
    put:
      security:
        - Authentication: []
      summary: Manual switchover
      tags:
        - Redundancy
      description: Trigger manual switchover on the active DNOR node
      requestBody:
        description: Manual switchover.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: "#/components/schemas/RedundancySwitchoverSuccessMsg"
                  success:
                    type: boolean
                    example: "True"
          description: Manual switchover succeeded
        "403":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: "#/components/schemas/RedundancySwitchoverFailMsg"
          description: Manual switchover failed
  /api/target-group/groups:
    get:
      security:
        - Authentication: []
      summary: Get all existing target groups
      tags:
        - NCE Group Management
      description: Get all existing target groups
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfTargetGroup"
          description: Successful
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Cannot get all target groups
        "500":
          content:
            application/json: {}
          description: Cannot get all target groups - unknown error
  /api/target-group/create-group:
    post:
      security:
        - Authentication: []
      summary: Create new target group
      tags:
        - NCE Group Management
      description: Create new target group
      requestBody:
        description: >-
          Target group details. (Click Schema to display the element
          descriptions)
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - groupName
                - parentGroupId
              properties:
                groupName:
                  type: string
                  example: firstGroup
                  description: Target group name, for example firstGroup
                parentGroupId:
                  type: string
                  example: firstGroupId
                  description: >-
                    Parent group id, higher level on group hierarchy. If there
                    is no parent group - root group id
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Free text message
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: The created target group ID.
                    description: Additional data.
          description: Successful
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Cannot create new target group
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Cannot create new target group - parent group ID not found
        "500":
          content:
            application/json: {}
          description: Cannot create new target group - unknown error
  /api/target-group/update-group/{group-id}:
    put:
      security:
        - Authentication: []
      summary: Update target group
      tags:
        - NCE Group Management
      description: Update target group
      parameters:
        - name: group-id
          in: path
          required: true
          description: Required group ID.
          schema:
            $ref: "#/components/schemas/uuid"
      requestBody:
        description: >-
          Target group details. (Click Schema to display the element
          descriptions)
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                groupName:
                  type: string
                  example: groupName
                  description: Updated group name
                parentGroupId:
                  type: string
                  example: parentGroupId
                  description: Updated parent group ID
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Successful
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Cannot update target group
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: >-
            Cannot update target group - the requested group ID or parent group
            ID is not found
        "500":
          content:
            application/json: {}
          description: Cannot update target group - unknown error
  /api/target-group/{group-id}:
    delete:
      security:
        - Authentication: []
      summary: Delete target group by id
      tags:
        - NCE Group Management
      description: Delete target group by id
      parameters:
        - name: group-id
          in: path
          required: true
          description: Required group ID.
          schema:
            $ref: "#/components/schemas/uuid"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Successful
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Cannot delete target group
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Cannot delete target group - group-id not found
        "500":
          content:
            application/json: {}
          description: Cannot delete target group - unknown error
  /api/task-management/task-executions:
    get:
      security:
        - Authentication: []
      summary: Get all tasks executions, past and currently running
      tags:
        - Task Management
      description: Get all tasks executions
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TaskExecution"
          description: Successful
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Cannot get all tasks executions
        "500":
          content:
            application/json: {}
          description: Cannot get all tasks executions - unknown error
  /api/task-management/tasks:
    get:
      security:
        - Authentication: []
      summary: Get all tasks
      tags:
        - Task Management
      description: Get all tasks
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
          description: Successful
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Cannot get all tasks
        "500":
          content:
            application/json: {}
          description: Cannot get all tasks - unknown error
  /api/task-management/create-task:
    post:
      security:
        - Authentication: []
      summary: Create new task
      tags:
        - Task Management
      description: Create new task
      requestBody:
        description: Task details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTaskRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        description: The created task ID.
                    description: Additional data.
          description: Successful
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Cannot create new task
        "500":
          content:
            application/json: {}
          description: Cannot create new task - unknown error
  /api/task-management/update-task/{task-id}:
    put:
      security:
        - Authentication: []
      summary: Update task
      tags:
        - Task Management
      description: Update task
      parameters:
        - name: task-id
          in: path
          required: true
          description: Required task ID
          schema:
            $ref: "#/components/schemas/uuid"
      requestBody:
        description: Task details. (Click Schema to display the element descriptions)
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTaskRequest"
      responses:
        "200":
          content:
            application/json: {}
          description: Successful
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Cannot update task
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Cannot update task - task-id not found
        "500":
          content:
            application/json: {}
          description: Cannot update task - unknown error
  /api/task-management/execute-task/{task-id}:
    post:
      security:
        - Authentication: []
      summary: Execute task
      tags:
        - Task Management
      description: Execute task
      parameters:
        - name: task-id
          in: path
          required: true
          description: Required task ID.
          schema:
            $ref: "#/components/schemas/uuid"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Successful
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Cannot start task
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Cannot start task - task-id not found
        "500":
          content:
            application/json: {}
          description: Cannot start task - unknown error
  /api/task-management/cancel-task/{task-execution-id}:
    post:
      security:
        - Authentication: []
      summary: Cancel running task execution
      tags:
        - Task Management
      description: Cancel running task execution
      parameters:
        - name: task-execution-id
          in: path
          required: true
          description: Task execution ID
          schema:
            $ref: "#/components/schemas/uuid"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Successful
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Cannot cancel required task
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Cannot cancel required task - task-id not found
        "500":
          content:
            application/json: {}
          description: Cannot cancel required task - unknown error
  api/task-management/delete-task/{task-id}:
    delete:
      security:
        - Authentication: []
      summary: Delete task
      tags:
        - Task Management
      description: Delete task by task-id
      parameters:
        - name: task-id
          in: path
          required: true
          description: Required Task id.
          schema:
            $ref: "#/components/schemas/uuid"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Successful
        "403":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Cannot delete task
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
          description: Cannot delete task - task-id not found
        "500":
          content:
            application/json: {}
          description: Cannot delete task - unknown error
  api/services/monitoring/fault-management/alarms/{alarm-name}:
    get:
      security:
        - Authentication: []
      summary: Get alarm configuration
      tags:
        - Monitoring Fault Management Alarms
      description: Get alarm configuration by alarm name.
      parameters:
        - name: alarm-name
          in: path
          required: true
          schema:
            type: string
            example: DnorHostCpuUsage
          description: The alarm name.
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                properties:
                  key:
                    $ref: "#/components/schemas/KeyType"
                  nodeType:
                    $ref: "#/components/schemas/NodeType"
                  subObject:
                    $ref: "#/components/schemas/SubObject"
                  resource:
                    $ref: "#/components/schemas/Resource"
                  subResource:
                    $ref: "#/components/schemas/SubResource"
                  syslogName:
                    type: string
                    example: DNOR_CONTAINER_MEMORY_USAGE_CRITICAL
                  displaySeverity:
                    $ref: "#/components/schemas/displaySeverity"
                  enableAlarm:
                    $ref: "#/components/schemas/AdminState"
                  enableAlarmSyslog:
                    $ref: "#/components/schemas/AdminState"
                  alarmRule:
                    type: string
                    example: >-
                      (sum(container_memory_usage_bytes) BY (instance) /
                      node_memory_MemTotal_bytes * 100)
                  createdAt:
                    type: string
                    format: date-time
                    pattern: ^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})Z$
                  udatedAt:
                    type: string
                    format: date-time
                    pattern: ^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})Z$
                  summary:
                    type: string
                    example: Container Memory usage is above 80%
                  message:
                    type: string
                    example: OK
          description: Get Alarm configuration
        "400":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error
          description: Get alarm configuration by alarm name failed
  /api/services/monitoring/fault-management/alarms/:
    get:
      security:
        - Authentication: []
      summary: Get all alarms configuration
      tags:
        - Monitoring Fault Management Alarms
      description: Get all alarms configuration.
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    key:
                      $ref: "#/components/schemas/KeyType"
                    nodeType:
                      $ref: "#/components/schemas/NodeType"
                    subObject:
                      $ref: "#/components/schemas/SubObject"
                    resource:
                      $ref: "#/components/schemas/Resource"
                    subResource:
                      $ref: "#/components/schemas/SubResource"
                    syslogName:
                      type: string
                      example: DNOR_CONTAINER_MEMORY_USAGE_CRITICAL
                    displaySeverity:
                      $ref: "#/components/schemas/displaySeverity"
                    enableAlarm:
                      $ref: "#/components/schemas/AdminState"
                    enableAlarmSyslog:
                      $ref: "#/components/schemas/AdminState"
                    alarmRule:
                      type: string
                      example: >-
                        (sum(container_memory_usage_bytes) BY (instance) /
                        node_memory_MemTotal_bytes * 100)
                    summary:
                      type: string
                      example: Container Memory usage is above 80%
                    createdAt:
                      type: string
                      format: date-time
                      pattern: ^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})Z$
                    udatedAt:
                      type: string
                      format: date-time
                      pattern: ^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})Z$
                    message:
                      type: string
                      example: OK
          description: Get all alarms configuration
        "400":
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Error
          description: Get all alarms configuration failed
